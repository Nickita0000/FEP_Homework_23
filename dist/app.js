class UsersListAPI{static API="https://642768d646fd35eb7c3f6d3b.mockapi.io/api/userlist/";static request(t="",e="GET",i){return fetch(UsersListAPI.API+t,{method:e,body:i?JSON.stringify(i):void 0,headers:{"Content-type":"application/json"}}).then(t=>{if(t.ok)return t.json();throw new Error("Can not execute server request.")})}static getList(){return UsersListAPI.request().catch(()=>{throw new Error("Can not retrieve contact list from server.")})}static createUser(t){return UsersListAPI.request("","POST",t).catch(()=>{throw new Error("Can not add contact to list.")})}static deleteUser(t){return UsersListAPI.request(t,"DELETE").catch(()=>{throw new Error("Can not delete this contact.")})}static updateUser(t,e){return UsersListAPI.request(t,"PUT",e).catch(()=>{throw new Error("Can not update data about this contact.")})}}class Collection{#initialList=[];fetch(){return UsersListAPI.getList().then(t=>{this.#initialList=t,console.log(this.#initialList)})}getList(){return this.#initialList}delete(t){return this.deleteListItem(t),UsersListAPI.deleteUser(t),Promise.resolve()}create(t){return UsersListAPI.createUser(t).then(t=>(this.addListItem(t),t))}update(e,t){return UsersListAPI.updateUser(e,t).then(t=>(this.editListItem(t,e),t))}deleteListItem(e){return this.#initialList.filter(t=>t.id!==e)}editListItem(e,i){return this.#initialList=this.#initialList.map(t=>t.id===i?e:t)}addListItem(t){return this.#initialList.push(t)}findContactById(e){return this.#initialList=this.#initialList.find(t=>t.id===e)}}class ContactFormView{constructor(t){this.$form=this.init(),this.$inputs=this.$form.find("input"),this.options=t}init(){return $(`
        <form id="userForm">
             <input id="id" type="hidden">
             <input id="name" type="text" placeholder="Your name">
             <input id="surname" type="text" placeholder="Your surname">
             <input id="phone" type="number" placeholder="Phone number">
             <button id="buttonSave">Save</button>
        </form>`).on("submit",this.onFormSubmit.bind(this))}onFormSubmit(t){t.preventDefault();t=this.getFormData();this.isPersonDataValid(t)?this.options.onSubmit(t):showError(new Error("Введите корректные данные!"))}renderFormView(t){t.append(this.$form)}isPersonDataValid(t){return""!==t.name&&""!==t.surname&&""!==t.phone&&!1===isNaN(t.phone)}getFormData(){var t={};for(const e of this.$inputs)t[e.id]=e.value;return t}fillForm(t){for(const e of this.$inputs)e.value=t[e.id]}clearForm(){for(const t of this.$inputs)t.value=""}}class ContactListView{static SELECTOR_BTN_EDIT=".buttonChange";static SELECTOR_BTN_DELETE=".buttonDelete";static SELECTOR_DATA_USER=".user";constructor(t){this.$initTitleView=this.init(),this.$contactList=this.$initTitleView.find("#contactList"),this.options=t}init(){return $(`
        <table>
            <tbody id="contactList">
                <tr>
                    <th>Name</th>
                    <th>Surname</th>
                    <th>Phone</th>
                    <th>Actions</th>
                </tr>
            </tbody>
        </table>`).on("click",ContactListView.SELECTOR_BTN_DELETE,this.onDeleteBtnClick.bind(this)).on("click",ContactListView.SELECTOR_BTN_EDIT,this.onEditBtnClick.bind(this))}onEditBtnClick(t){t=this.findClickElement(t.target);this.options.onEditBtn(t)}onDeleteBtnClick(t){t=this.findClickElement(t.target);this.options.onDeleteBtn(t)}renderListView(t){var e=this.$initTitleView;t.append(e)}htmlUser(t){return`
        <tr class="user" data-id="${t.id}">
            <td class="user__name">${t.name}</td>
            <td class="user__surname">${t.surname}</td>
            <td class="user__phone">${t.phone}</td>
            <td>
                <button class="buttonChange">Edit</button>
                <button class="buttonDelete">Delete</button>
            </td>
        </tr>
        `}renderServerList(t){t=t.map(this.htmlUser);this.$contactList.html(t)}renderUsersList(t){t=this.htmlUser(t);this.$contactList.append(t)}replaceContact(t,e){t=this.$contactList.find(`[data-id="${t}"]`),e=this.htmlUser(e);t.replaceWith(e)}findClickElement(t){return t.closest(ContactListView.SELECTOR_DATA_USER).dataset.id}removeCurrentContact(t){this.$contactList.find(`[data-id="${t}"]`).remove()}}class Controller{constructor(t){this.contactsCollection=new Collection,this.contactFormView=new ContactFormView({onSubmit:this.save.bind(this)}),this.contactListView=new ContactListView({onDeleteBtn:this.onDeleteButtonClick.bind(this),onEditBtn:t=>{t=this.contactsCollection.findContactById(t);this.contactFormView.fillForm(t)}}),this.contactFormView.renderFormView(t),this.contactListView.renderListView(t),this.contactsCollection.fetch().then(()=>{this.contactListView.renderServerList(this.contactsCollection.getList())}).catch(t=>this.showError(t))}save(e){e.id?this.contactsCollection.update(e.id,e).then(t=>{this.contactListView.replaceContact(e.id,t),this.contactFormView.clearForm()}).catch(t=>this.showError(t)):this.contactsCollection.create(e).then(t=>{this.contactListView.renderUsersList(t),this.contactFormView.clearForm()}).catch(t=>this.showError(t))}onDeleteButtonClick(t){this.contactsCollection.delete(t).catch(t=>this.showError(t)),this.contactListView.removeCurrentContact(t)}showError(t){alert(t.message)}}const $root=$("#root");new Controller($root);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
